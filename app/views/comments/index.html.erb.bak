<!-- <p id="notice"><%#= notice %></p> -->

<h1>Listing Comments</h1>

<table>
  <thead>
    <tr>
      <th>User</th>
      <th>Topic</th>
      <th>Comment on Post</th>
      <th>Content</th>
      <th>Votes</th>
      <th>Parent comment id</th>
      <th colspan="3"></th>
    </tr>
  </thead>

  <tbody>
    <% @comments.each do |comment| %>
      <tr>
        <td><%= @posted_by = "#{User.find(comment.user_id).first_name} #{User.find(comment.user_id).last_name}"%></td><%# comment.user %>
        <td><%= @topic_title = Topic.find(comment.topic_id).title %></td> <%# replaced comment.topic %>
        <td><%= @post_excerpt = truncate(Post.find(comment.post_id).content, :length =>15) %></td><%#replaced comment.post %>
        <td><%= comment.content %></td>
        <td><%= comment.votes %></td>
        <% if comment.comment_id.nil? %>
          <td>Comment on post id: <%= Post.find(comment.post_id).id %></td>
        <%else%>
          <td>Comment on comment id:<%= comment.comment_id %></td>
        <% end %>
        <td><%= link_to 'Show', comment %></td>
        <%# show the Edit link only on the comments that the currently logged in user can edit (per our authorize method for editing comments)%>
        <% if current_user && comment.user == current_user %>
        <td><%= link_to 'Edit', edit_comment_path(comment) %></td>
        <%end%>

        <%# Much like posts the Destroy action has been removed for the time being
        as it would require to add a dependent attribute to delete all comments
        dependent on other comments (if implementing comments of comments)%>
        <%# show the Destroy link only on the post that the currently logged in user as we did for the eidot link above%>
        <%# if current_user && post.user == current_user %>
        <!-- <td><%#= link_to 'Destroy', comment, method: :delete, data: { confirm: 'Are you sure?' } %></td> -->
        <%#end%>
      </tr>
    <% end %>
  </tbody>
</table>

<br>
<% if current_user %>
  <%= link_to 'New Comment', new_comment_path %>
<% end %>
